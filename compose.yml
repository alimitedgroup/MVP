volumes:
  nats_data:

networks:
  warehouse:
    driver: bridge

services:
  nats:
    image: nats:2.10-alpine3.21
    ports:
      - "4222:4222"
    command:
      - "--jetstream"
      - "--store_dir=/data/jetstream"
    volumes:
      - nats_data:/data/jetstream
    networks:
      - warehouse
    healthcheck:
      test: ["CMD-SHELL", "wget http://localhost:8222/healthz -q -S -O -"]
      interval: 1s
      timeout: 5s
      retries: 5

  api-gateway:
    build: { args: { SERVICE: api_gateway } }
    ports:
      - "80:8080"
    environment:
      - ENV_BROKER_URL=nats://nats:4222
      - ENV_API_PORT=8080
    volumes:
      - ./config.yml:/data/config.yml:ro
    networks:
      - warehouse
    depends_on:
      - nats

  warehouse-1:
    build: { args: { SERVICE: warehouse } }
    environment:
      - ENV_BROKER_URL=nats://nats:4222
      - ENV_WAREHOUSE_ID=1
    volumes:
      - ./config.yml:/data/config.yml
    networks:
      - warehouse
    depends_on:
      - nats

  warehouse-2:
    build: { args: { SERVICE: warehouse } }
    environment:
      - ENV_BROKER_URL=nats://nats:4222
      - ENV_WAREHOUSE_ID=2
    volumes:
      - ./config.yml:/data/config.yml:ro
    networks:
      - warehouse
    depends_on:
      - nats

  catalog:
    build: { args: { SERVICE: catalog } }
    environment:
      - ENV_BROKER_URL=nats://nats:4222
    volumes:
      - ./config.yml:/data/config.yml:ro
    networks:
      - warehouse
    depends_on:
      - nats

  order:
    build: { args: { SERVICE: order } }
    environment:
      - ENV_BROKER_URL=nats://nats:4222
    volumes:
      - ./config.yml:/data/config.yml
    networks:
      - warehouse
    depends_on:
      - nats

  authenticator:
    build: { args: { SERVICE: authenticator } }
    environment:
      - ENV_BROKER_URL=nats://nats:4222
    volumes:
      - ./config.yml:/data/config.yml
    networks:
      - warehouse
    depends_on:
      - nats

  influxdb:
    image: influxdb:2.7-alpine
    container_name: influxdb
    ports:
      - "8086:8086"
    volumes:
      - ./influxdb_data:/var/lib/influxdb2
    networks:
      - warehouse
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=admin1234
      - DOCKER_INFLUXDB_INIT_ORG=my-org
      - DOCKER_INFLUXDB_INIT_BUCKET=stockdb
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=my-token
  notification:
    build: { args: { SERVICE: notification } }
    environment:
      - INFLUXDB_TOKEN=my-token
      - INFLUXDB_ORG=my-org
      - ENV_BROKER_URL=nats://nats:4222
    networks:
      - warehouse
    depends_on:
      - nats
      - influxdb

  collector:
    image: otel/opentelemetry-collector-contrib
    ports:
      - "4317:4317"
    volumes:
      - ./containers/collector.yml:/etc/otelcol-contrib/config.yaml:ro
  loki:
    image: grafana/loki:3.4.2
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-otlp-receiver"
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
